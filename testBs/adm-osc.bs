<pre class='metadata'>
Title: ADM-OSC
Shortname: ADM-OSC
Logo: https://immersive-audio-live.github.io/ADM-OSC/assets/images/logo.png
Boilerplate: copyright no, footer no
Local Boilerplate: logo yes
Level: none
Status: LS
URL: https://immersive-audio-live.github.io/ADM-OSC/
Repository: immersive-audio-live/ADM-OSC
Test Suite: https://github.com/immersive-audio-live/ADM-OSC/tree/main/tests
Previous Version: https://immersive-audio-live.github.io/ADM-OSC/html/adm_spec.html
Editor: Mathieu Delquignies, d&amp;b audiotechnik https://www.dbaudio.com/, mathieu.delquignies@dbaudio.com
Editor: Michael Zbyszynski, L-Acoustics https://l-isa.l-acoustics.com/, michael.zbyszynskki@l-acoustics.com
Inline Github Issues: true
Abstract: An industry initiative for standardization of [=Object-Based Audio=] positioning data in live production ecosystems by implementing the [=Audio Definition Model=] over [=Open Sound Control=].
</pre>

Introduction {#intro}
=====================

ADM-OSC has been designed to solve real problems for live and broadcast sound producers. Since 2019, a growing workgroup of industry stakeholders from live music and broadcast domains has gathered to exchange needs and experiences from real life production cases. Those companies have already expressed interest or have implemented ADM-OSC: Atlas, Adamson, Amadeus Acoustics GmbH, BBC, d&amp;b audiotechnik, DiGiCo, Dolby, FLUX::SE, FollowMe, Grapes3D, Holophonix, L-Acoustics, Lawo, Merging Technologies, Meyer Sound, Naostage, Radio-France, Steinberg etc. [[EBU-Tech-3396]]

Motivation &amp; goals {#goals}
----------------------------------

- To facilitate the sharing of audio objects metadata between a live ecosystem and a broadcast or studio ecosystem.
- To define a basic layer of interoperability between Object Editors and Object renderers while not aiming at replacing more complete manufacturer specific protocols or grammars.
- To define a direct translation of the most relevant [=ADM=] Object Properties onto a communication protocol widely used in the live industry, [=OSC=].
- Keeping the grammar scope aligned with the [=ADM=] properties.
- Share this proposal with the EBU so they can become a relay, publish and support this initiative.
- Extend this small grammar to more [=ADM=] properties (beds, etc.) in the future.

Current spec (v1.0) {#v1.0}
================================

Position messages {#pos}
-----------------

<table class="def">
    <thead>
        <tr>
            <th>address</th>
            <th>type</th>
            <th>units</th>
            <th>min</th>
            <th>max</th>
            <th>default</th>
            <th>description</th>
            <th>example</th>
        </tr>
    </thead>
    <tbody>
        <tr>
            <td>/adm/obj/<i>n</i>/d</td>
            <td>f</td>
            <td>degrees</td>
            <td>-180.0</td>
            <td>180.0</td>
            <td>-</td>
            <td><b>azimuth</b> “theta - &#952;” of sound location. -90 is on the Right, 0 is in front.</td>
            <td>/adm/obj/4/azim -22.5</td>
        </tr>
        <tr>
            <td>/adm/obj/<i>n</i>/elev</td>
            <td>f</td>
            <td>degrees</td>
            <td>-90.0</td>
            <td>90.0</td>
            <td>-</td>
            <td><b>elevation</b> “phi - &#632;” of sound location</td>
            <td>/adm/obj/4/elev 12.7</td>
        </tr>
        <tr>
            <td>/adm/obj/<i>n</i>/dist</td>
            <td>f</td>
            <td>normalized</td>
            <td>0.0</td>
            <td>1.0</td>
            <td>1.0</td>
            <td><b>distance</b> “r” from origin</td>
            <td>/adm/obj/4/dist 0.9</td>
        </tr>
        <tr>
            <td>/adm/obj/<i>n</i>/aed</td>
            <td>f f f</td>
            <td colspan=4>see above</td>
            <td>compact format enables synchronicity of position changes and also less network traffic</td>
            <td>/adm/obj/4/aed -22.5 12.7 0.9</td>
        </tr>
        <tr>
            <td>/adm/obj/<i>n</i>/x</td>
            <td>f</td>
            <td>normalized</td>
            <td>-1.0</td>
            <td>1.0</td>
            <td>0.0</td>
            <td>left/right dimension. -1 is left</td>
            <td>/adm/obj/4/x -0.9</td>
        </tr>
        <tr>
            <td>/adm/obj/<i>n</i>/y</td>
            <td>f</td>
            <td>normalized</td>
            <td>-1.0</td>
            <td>1.0</td>
            <td>0.0</td>
            <td>front/back dimension. 1 is front</td>
            <td>/adm/obj/4/y 0.15</td>
        </tr>
        <tr>
            <td>/adm/obj/<i>n</i>/z</td>
            <td>f</td>
            <td>normalized</td>
            <td>-1.0</td>
            <td>1.0</td>
            <td>0.0</td>
            <td>top/bottom dimension. 1 is top</td>
            <td>/adm/obj/4/z 0.7</td>
        </tr>
        <tr>
            <td>/adm/obj/<i>n</i>/xyz</td>
            <td>f f f</td>
            <td colspan=4>see above</td>
            <td>compact format enables synchronicity and reduces network traffic</td>
            <td>/adm/obj/4/xyz -0.9 0.15 0.7</td>
        </tr>
        <tr>
            <td>/adm/obj/<i>n</i>/w</td>
            <td>f</td>                        
            <td>normalized</td>
            <td>0.0</td>
            <td>1.0</td>
            <td>0.0</td>
            <td>horizontal extent in normalized units</td>
            <td>/adm/obj/3/w 0.2</td>
        </tr>
        <tr>
            <td>/adm/obj/<var>n</var>/gain</td>
            <td>f</td>
            <td>linear</td>
            <td>0.</td>
            <td></td>
            <td>1.0</td>
            <td>Apply a gain to the audio in the object.</td>
            <td>/adm/obj/3/gain 0.707</td>
        </tr>
    </tbody>
</table>

NOTE: Types: f = float, i = integer, s = string. f f f is a list of three floats.

Configuration messages {#config}
--------------------------------

<table class="def">
    <thead>
        <tr>
            <th>address</th>
            <th>type</th>
            <th>units</th>
            <th>min</th>
            <th>max</th>
            <th>default</th>
            <th>description</th>
            <th>example</th>

        </tr>
    </thead>
    <tbody>
        <tr>
            <td>/adm/obj/<var>n</var>/config</td>
            <td>/cartesian</td>
            <td>int</td>
            <td>0/1</td>
            <td>0</td>
            <td>1</td>
            <td>0</td>
            <td>If the flag is set to 1, Cartesian coordinates are used. Otherwise spherical coordinates are used.</td>
        </tr>
        <tr>
            <td>/adm/obj/<var>n</var>/dMax</td>
            <td>float</td>
            <td>meters</td>
            <td>0.</td>
            <td></td>
            <td></td>
            <td>Distance signified by a normalized dRef value of 1</td>
            <td>/adm/config/obj/1/dMax 21.3</td>
        </tr>
        <tr>
            <td>/adm/obj/<var>n</var>/dRef</td>
            <td>float</td>
            <td>normalized</td>
            <td>0.0</td>
            <td>1.0</td>
            <td>1.0</td>
            <td>Distance where dimensionless rendering is replaced with with physics-based rendering.</td>
            <td>/adm/config/obj/1/dRef 0.2</td>
        </tr>
    </tbody>
</table>

Implementation Matrix {#implementation}
=======================================

Issue(immersive-audio-live/adm-osc#24):

Basic ADM-OSC principals {#basics}
============================

Roles
------------

### Sender (client)

- Object Editor sending positioning data to one or more receivers.
- Cartesian position data is always normalized

### Receiver (server)

- Handles the (optional) local scaling of normalized data: x, y, z, distance
- The receiver can be a DAW, an [=ADM=] renderer, an object editor, a bridge (ADM-OSC <-> sADM)

Ports {#ports}
-----------------

Data rate {#rate}
-----------------

## Coordinates

### Cartesian

```
    (-1, 1) --------- (1, 1)  
       |                |  
       |                |  
       |                |  
       |                |  
    (-1, -1) ---------(1, -1)  
```

- Values are normalized between -1.0 and 1.0 
- <math><mi>x</mi> <mo>=</mo> <mi>1</mi></math> is right
- <math><mi>y</mi> <mo>=</mo> <mi>1</mi></math> is forward
- <math><mi>z</mi> <mo>=</mo> <mi>1</mi></math> is up

### Polar

- 0&deg; azimuth is straight ahead
- Positive azimuth is on the left, so a front-left speaker is +30&deg;
- +90&deg; elevation is straight up

### Conversions ### {#conversions}

The [=ADM=] relationship between polar and Cartesian coordinates is specified in section 10.1 of this document: [[EBU-BS-2127]]. This has some limitations (see issue 25 below) and could be extended to include more AR, VR, and game engine use cases.

Issue(immersive-audio-live/adm-osc#25):

<!-- Big Text: Tools -->

Development &amp; Test tools {#tools}
=====================================

<a href src="https://github.com/madees/ADM-OSC-Chataigne-Module>Chataigne module</a> (Mathieu Delquignies / d&amp;b audiotechnik)
---------------------------------

to retreive parameters or control ADM-OSC [=object-based audio=] software or hardware with [=OSC=] protocol.

Tester Desktop application (Jose Gaudin / Meyer Sound)
-----------------------------------

<a href src="https://github.com/immersive-audio-live/ADM-OSC/tree/main/Resources>download from resources directory</a>

Validator, Test and Stress Test **Python Module** (Gael Martinet / FLUX::)
--------------------------------

adm_osc module is available to install through pip:

```shell 
pip install adm-osc
```
quick examples:

```python 
from adm_osc import OscClientServer

# create a basic client/server that implement basic ADM-OSC communication with stable parameters 
# + command monitoring and analyze
cs = OscClientServer(address='127.0.0.1', out_port=9000, in_port=9001)

# send some individual parameters  
cs.send_object_position_azimuth(object_number=1, v=-30.0)
cs.send_object_position_elevation(object_number=1, v=0.0)
cs.send_object_position_distance(object_number=1, v=2.0)

# or pack them
cs.send_object_polar_position(object_number=1, pos=[-30.0, 0.0, 2.0])

# in cartesian coordinates
cs.send_object_cartesian_position(object_number=1, pos=[-5.0, 8.0, 0.0])

# see documentation for full list of available functions

# when receiving an adm osc command its analyze will be printed on the command output window
#
# e.g.
#
# >> received valid adm message for obj :: 1 :: gain (0.7943282127380371)
# >> received valid adm message for obj :: 1 :: position aed (20.33701515197754, 0.0, 0.8807612657546997)
# >> received valid adm message for obj :: 1 :: position xyz (-0.2606865465641022, 0.8273822069168091, 0.0)
# >>
# >> ERROR: unrecognized ADM address : "/adm/obj/1/bril" ! unknown command "/bril/"
# >> ERROR: arguments are malformed for "/adm/obj/1/gain :: (1.4791083335876465,)":
# >>     argument 0 "1.4791083335876465" out of range ! it should be less or equal than "1.0"

```

```python 
from adm_osc import TestClient
# create a test client, assume default address (local: '127.0.0.1')
# test client can be used to test how receiver will handle all kind of parameters and parameters value range
sender = TestClient(out_port=9000)

# all stable parameters for a specific object
sender.set_object_stable_parameters_to_minimum(object_number=1)
sender.set_object_stable_parameters_to_maximum(object_number=1)
sender.set_object_stable_parameters_to_default(object_number=1)
sender.set_object_stable_parameters_to_random(object_number=1)

# all stable parameters for a range of objects
sender.set_objects_stable_parameters_minimum(objects_range=range(1, 64))
sender.set_objects_stable_parameters_maximum(objects_range=range(1, 64))
sender.set_objects_stable_parameters_default(objects_range=range(1, 64))
sender.set_objects_stable_parameters_random(objects_range=range(1, 64))

# all stable parameters for all objects
sender.set_all_objects_stable_parameters_minimum()
sender.set_all_objects_stable_parameters_maximum()
sender.set_all_objects_stable_parameters_default()
sender.set_all_objects_stable_parameters_random()

# see documentation for full list of available functions
```

```python 
from adm_osc import StressClient
# create a stress client, assume default address (local: '127.0.0.1')
# stress client will send huge amount of data to stress test the receivers
sender = StressClient(out_port=9000)
# do stress test in cartesian coordinates
sender.stress_cartesian_position(number_of_objects=64, duration_in_second=60.0, interval_in_milliseconds=10.0)
# do stress test in polar coordinates
sender.stress_polar_position(number_of_objects=64, duration_in_second=60.0, interval_in_milliseconds=10.0)
```
<a href src="https://github.com/immersive-audio-live/ADM-OSC/tree/main/Source/adm_osc/doc/documentation.md">full documentation</a>
<a href src="https://github.com/immersive-audio-live/ADM-OSC/tree/main/Source">Source directory</a>

Discussion {#discuss}
=====================

Draft 0.5
_______________________

A <a href src="https://immersive-audio-live.github.io/ADM-OSC/html/adm_spec_0.5_draft.html">draft for version 0.5</a> was proposed but not adopted. This draft contains messages for greater compatibility with [=ADM=] in broadcast use cases.  It brings up a potential problem of sending critical configuration messages over UDP. Whereas loosing a few high-rate 

Relationship to ADM
_______________________

ADM-OSC messages are designed to be translatable to (S-)ADM if needed. Messages that don't translate into one (or more) [=ADM=] tag should not be in the `/adm` namespace.

Issue(immersive-audio-live/adm-osc#33):

Definitions {#define}
=====================

<dfn local-lt="ADM">Audio Definition Model</dfn>

The Audio Definition Model (ADM) was first published by the European Broadcast Union (EBU) in
2015 as a standard representation of audio metadata [1]. The goal of ADM is to support a broad range of
use cases that include spatial and immersive audio, as well as interactive personalization and accessibility
features [[What-is-ADM]]. ADM can be used to represent channel-based, scene-based, and [=object-based audio=]. It is
defined by the EBU in ITU-R BS.2076 [[EBU-BS-2076]]

<dfn local-lt="OBA">Object-Based Audio</dfn>

Object-based representation encodes audio tracks along with positional and other data about how that audio should be reproduced, or rendered, during playback. Positional data is speaker-agnostic, allowing object-based mixes to be highly portable. A musician might audition a mix on headphones using a binaural renderer then perform at a venue with dozens of loudspeakers using a spatial renderer. That mix might then be rendered for streaming with a third renderer. [[Tsingos-2017]]

<dfn local-lt="OSC">Open Sound Control</dfn>

OpenSoundControl (OSC) is a data transport specification (an encoding) for realtime message communication among applications and hardware. OSC was developed by researchers Matt Wright and Adrian Freed during their time at the Center for New Music & Audio Technologies (CNMAT). OSC was originally designed as a highly accurate, low latency, lightweight, and flexible method of communication for use in realtime musical performance. They proposed OSC in 1997 as “a new protocol for communication among computers, sound synthesizers, and other multimedia devices that is optimized for modern networking technology”.

There are several open-source implementations that simplify developers’ adoption, The OSC 1.0
specification has been published in 2002 [8].

<dfn>Renderer</dnf>

<!-- Big Text: Refs -->

<pre class='biblio'>
{
    "EBU-BS-2076": {
        "title" : "Audio Definition Model",
        "status": "Spec",
        "publisher": "EBU",
        "href" : "https://www.itu.int/rec/R-REC-BS.2076"
    },
    "EBU-BS-2127" : {
        "title": "Audio Definition Model renderer for advanced sound systems" ,
        "status": "Spec",
        "publisher": "EBU",
        "href" : "https://www.itu.int/rec/R-REC-BS.2127"
    },
    "EBU-Tech-3396": {
	    "title": "BINAURAL EBU ADM RENDERER (BEAR) FOR OBJECT-BASED SOUND OVER HEADPHONES",
        "status": "Spec",
        "publisher": "EBU",
        "href": "https://tech.ebu.ch/publications/tech3396"
    },
    "Tsingos-2017": {
        "authors": [ "N. Tsingos" ],
        "title": "Object-based audio",
        "status": "in Immersive Sound",
        "pages": "244-275",
        "publisher": "Routledge",
        "date": "2017"
    },
    "What-is-ADM": {
        "title" : "What is the ADM?",
        "href" : "https://adm.ebu.io/background/what_is_the_adm.html"
    }
}
</pre>